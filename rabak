#!/usr/bin/perl

# See Licence.txt for licence

use warnings;
use strict;

# Comment out when not debugging
use Carp ();
local $SIG{__WARN__} = \&Carp::cluck;
local $SIG{__DIE__} = \&Carp::cluck;

umask 0077; # make sure all tempfiles are readable only by us

use Cwd;
use Data::Dumper;
use Getopt::Std;

use RabakLib::ConfFile;
use RabakLib::Set;
use RabakLib::Admin;
use RabakLib::Log;

my $VERSION= "1.0rc2";
my $DEBUG= 0;

$Getopt::Std::STANDARD_HELP_VERSION= 1;

my $oConfFile;
my $oConf;

my %sOpts= ();

my $sCommandLine= "'" . join("' '", $0, @ARGV) . "'";

getopts("hi:lc:pqv", \%sOpts) or die HELP_MESSAGE();

my $sCmd= shift @ARGV || '';

if ($sOpts{h}) {
    help($sCmd);
    exit 1;
}

cmd_backup() if $sCmd eq 'backup';
cmd_conf()   if $sCmd eq 'conf';
cmd_doc()    if $sCmd eq 'doc';

# Work in progress:
cmd_rmfile() if $sCmd eq 'rmfile';
cmd_admin()  if $sCmd eq 'admin';
cmd_dot()    if $sCmd eq 'dot';

usage(); # dies when done

# -----------------------------------------------------------------------------
#  COMMAND: BACKUP
# -----------------------------------------------------------------------------

sub cmd_backup {
    my $hBakSet= _cmd_setup(shift @ARGV);
    $hBakSet->backup();
    exit 0;
}

# -----------------------------------------------------------------------------
#  COMMAND: CONF
# -----------------------------------------------------------------------------

sub cmd_conf {
    my $sBakSet= shift @ARGV || '';
    if ($sBakSet eq '') {
        $oConfFile= _conf_read();
        $oConfFile->print_set_list();
        exit 0;
    }
    if ($sBakSet eq '*') {
        $oConfFile= _conf_read();
        $oConfFile->print_all();
        exit 0;
    }
    my $hBakSet= _cmd_setup($sBakSet, 1);
    $oConf->set_value("switch.warn_on_remote_access", 1);
    print join "\n", @{$hBakSet->show()};
    exit 0;
}

# -----------------------------------------------------------------------------
#  COMMAND: RMFILE
# -----------------------------------------------------------------------------

sub cmd_rmfile {
    my $hBakSet= _cmd_setup(shift @ARGV);
    _exit($hBakSet->rm_file(@ARGV));
}

# -----------------------------------------------------------------------------
#  COMMAND: DOC
# -----------------------------------------------------------------------------

sub cmd_doc {
    print `perldoc RabakLib::Doc`;
    _exit(0);
}

# -----------------------------------------------------------------------------
#  COMMAND: ADMIN
# -----------------------------------------------------------------------------

sub cmd_admin {
    # TODO: use command line switches
    my $oAdmin= RabakLib::Admin->new(_conf_read());
    # print Dumper($oAdmin); die;
    _exit($oAdmin->loop());
}

# -----------------------------------------------------------------------------
#  COMMAND: DOT
# -----------------------------------------------------------------------------

sub cmd_dot {
    my $sBakSet= shift @ARGV || '';
    unless ($sBakSet) {
    	print "# Please specify a Backup Set!\n";
        exit 0;
    }
    my $hBakSet= _cmd_setup(shift @ARGV);
    print $hBakSet->toDot();
    # print Dumper($hBakSet); die;
    _exit(0);
}

# -----------------------------------------------------------------------------
#  HELPER FUNCTIONS
# -----------------------------------------------------------------------------

# sub eval_inside_rabakdir {
#     my $sCode= shift;
#
#     my $cwd= getcwd();
#     my $basedir= `dirname "$0"`;
#     chomp $basedir;
#     chdir $basedir if $basedir ne ''; # change
#
#     eval "$sCode 1;" or die @!;
#
#     chdir $cwd if $cwd ne '';
# }

sub _conf_read {
    my @sConfFiles = (
        "$ENV{HOME}/.rabak/rabak.cf",
        "/etc/rabak/rabak.cf",
        "/etc/rabak.cf",
        "/usr/local/rabak/rabak.cf",
        "./rabak.cf",
    );
    @sConfFiles= ($sOpts{c}) if defined $sOpts{c};
    $oConfFile= RabakLib::ConfFile->new(@sConfFiles);
    $oConf= $oConfFile->conf();
    # overwrite values with comand line switches
    my $sHostname= `hostname -f`;
    chomp $sHostname;
    $oConf->set_values({
        'switch.pretend' => $sOpts{p},
        'switch.logging' => defined $sOpts{v} ? LOG_DEBUG_LEVEL : LOG_DEFAULT_LEVEL,
        'switch.quiet' => $sOpts{q},
        'switch.targetvalue' => $sOpts{i},
        'switch.version' => $VERSION,
        'switch.hostname' => $sHostname,
        'switch.commandline' => $sCommandLine,
        'switch.configfile' => $oConfFile->filename(),
    });
    return $oConfFile;
}

sub _cmd_setup {
    my $sBakSet= shift;

    _conf_read();
    my $hSetConf= $oConf->get_node($sBakSet);

    unless ($hSetConf) {
    	print "# Backup Set '$sBakSet' does not exist!\n";
    	_exit(3);
    }

    # Build a Set from Hash
    my $oSet= RabakLib::Set->CloneConf($hSetConf);
    my $sError= $oSet->get_validation_message();

    if ($sError) {
    	print "# Backup Set '$sBakSet' is not properly defined:\n";
        print "# $sError\n";
        print "# The following values were found in the configuration:\n";
        $hSetConf->show();
    	_exit(3);
    }

    return $oSet;
}

# exitcodes:
# 1 usage, help
# 2 wrong parameter
# 3 error in conf file
# 9 other error
sub _exit {
    my $iErrorCode= shift;
    usage() if $iErrorCode == 2;
    exit $iErrorCode;
}

sub usage {
    # print "usage: rabak [switches] <command>\n";
    HELP_MESSAGE();
    exit 1;
}

sub help {
    my $sCmd= shift || '';

    my %sHelp= (
        'backup' => "rabak [switches] backup <set>
Help not implemented.
",
        'conf'   => "rabak [switches] conf [<set>]
Help not implemented.
",
        'doc'   => "rabak doc
Help not implemented.
",

#         'rmfile' => "rabak [switches] rmfile <set> <file-or-dir-mask> [ <file-or-dir-mask> .. ]
# Help not implemented.
# ",

    );
    unless (defined $sHelp{$sCmd}) {
        print "Usage:\n";
        foreach (sort keys %sHelp) {
            print "  $1\n" if $sHelp{$_} =~ /^(.*)$/m;
        }
        print "
Possible switches:
  -c <file>  Use <file> for configuration
  -i <value> Save on device with targetgroup value <value>
  -l         Log to file
  -p         Pretend
  -q         Be quiet
  -v         Be verbose
  --version  Show version
  --help     Show (this) help
";
        return;
#TODO:
#  implement verbosity levels
    }
    print $sHelp{$sCmd};
}

sub HELP_MESSAGE {
    help();
    return "Gave up";
}

sub VERSION_MESSAGE {
    print "This is rabak version $VERSION\n";
    return "Gave up";
}

1;
