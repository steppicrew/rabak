#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long 2.24 qw( :config auto_version bundling );
use Pod::Usage;
use HTTP::Daemon;
use HTTP::Status;
use Data::Dumper;

use lib "./lib";

use Rabak::Wui;

our $VERSION= '0.1';

my $have_module_reload;

BEGIN {
    eval { require Module::Reload; };
    unless ($@) {
        $have_module_reload= 1;
        import Module::Reload;
    }
}

our $opt_debug;
our $opt_help;
our $opt_man;

GetOptions( "debug", "help|h", "man|m" ) or pod2usage(2);
pod2usage(-verbose => 1) if $opt_help;
pod2usage(-verbose => 2) if $opt_man;

my $d = HTTP::Daemon->new(
    LocalPort => 8735,
    Reuse => $opt_debug,
) || die;
                                            
print "Please contact me at: <URL:", $d->url, ">\n";
print "DEBUG on\n" if $opt_debug;

my $conn;

$SIG{TERM}= $SIG{QUIT}= $SIG{INT}= sub {
    print STDERR "Caught SIGTERM - Closing connection\n";
    $conn->close if $conn;
    exit(0);
};

while ($conn = $d->accept) {
    while (my $request = $conn->get_request) {

        if ($opt_debug && $have_module_reload) {
            Module::Reload->check;
        }

        my $status= RC_FORBIDDEN;
        my $path= $request->uri->path;
        my $params;

        if ($request->method eq 'GET') {
            if ($path =~ /^\/static\/(.*)/) {
                $path= $1;
                $path =~ s#\.\.+##g;
                $path =~ s/[^-\/\.a-zA-Z0-9_]+//g;
                if (-e "static/$path") {
                    $conn->send_file_response("static/$path");
                    next;
                }
                $status= RC_NOT_FOUND;
            }
            else {
                $params = { $request->uri->query_form };
            }
        }
        if ($request->method eq 'POST') {

            # I don't know how to elegantly fetch POST params, so that'll have to do:
            my $uri = URI->new("http://localhost/");
            $uri->query($request->content);
            $params= { $uri->query_form };
        }
        if ($params) {
            my $content= Rabak::Wui::Request($path, $params);
            if (defined $content) {
                my $response = HTTP::Response->new(200);
                $response->content($content);
                $conn->send_response($response);
                next;
            }
            $status= RC_NOT_FOUND;
        }
        $conn->send_error($status, status_message($status));
    }
    $conn->close;
    undef($conn);
}
